edition = "2023";

package jscomp;

import "third_party/java_src/jscomp/java/com/google/javascript/jscomp/conformance.proto";

option features.utf8_validation = VERIFY;
option java_package = "com.google.javascript.jscomp";
option java_multiple_files = true;
option go_api_flag = "OPEN_TO_OPAQUE_HYBRID";  // needed for http://go/go-api-flag

/**
 * A conformance report output by JSCompiler. A report of this format is
 * generated when any of the following are built:
 *
 * <ul>
 * <li> MSS binaries & js_binary (via JsConformance action) - to be deprecated
 * soon, this produces `main_report` but must produce `binary_level_report`.
 *
 * <li> `js_library`s and `raw_js_library`s (via CheckJS action). This produces
 * `main_report` but must produce `library_level_jscp_report` and
 * `library_level_boq_web_report`.
 *
 * <li> `ts_library`s (via TSC). This produces `tsetse_report`.
 * </ul>
 */

message JsCompilerConformanceReportWrapper {
  /**
   * This message format is currently being used for several things.
   *
   * <ul>
   * <li> go/jscp (CheckJS) to log the allowlisted "global" violations. This
   * will soon be moved to get recorded in `library_level_jscp_report`.
   *
   * <li> MSS binaries as .mss.conformance to log the allowlisted "custom"
   * conformance violations -
   * http://google3/apps/framework/modulesets/builddefs/js_compilation_rules.bzl;l=1609;rcl=738576997.
   * This will soon be deprecated in favor of the `library_level_boq_web_report`
   * containing Boq Web conformance violations.
   *
   * </ul>
   *
   * <p>This report contains only the allowlisted violations.
   * TODO(b/393659358): Delete the `main_report` field once cr/737008133 is
   * submitted and the new field it introduces is getting populated by go/jscp
   * and Boq Web conformance configs. Instead, populate the go/jscp and Boq Web
   * specific fields in the wrapper report for CheckJS, and binary level report
   * field for binary build actions.
   */
  JsCompilerConformanceReport main_report = 1;

  /**
   * The report contains all the Boq Web violations seen in the library,
   * including the non-allowlisted ones, to be produced by the CheckJS action as
   * per go/supporting-library-level-js-conformance-dd.
   * TODO(b/332922526): This is currently not being populated.
   */
  JsCompilerConformanceReport library_level_boq_web_report = 2;

  /**
   * Report for go/jscp (CheckJS) to log the allowlisted "global" violations.
   * TODO(b/393659358): This is currently not being populated.
   */
  JsCompilerConformanceReport library_level_jscp_report = 3;

  /**
   * Report containing all the allowlisted violations seen in the binary (to be
   * generated by the `JSConformance` action). It will soon be deprecated in
   * favor of the `library_level_boq_web_conformance_checks_only_report`.
   * TODO(b/393659358): This is currently not being populated.
   */
  JsCompilerConformanceReport binary_level_report = 4;

  /**
   * Report containing all the allowlisted tsetse violations seen in the binary.
   * This report is generated by the TypeScript compiler.
   */
  JsCompilerConformanceReport tsetse_report = 5;
}

message JsCompilerConformanceReport {
  // Represents two different things depending on whether the report is a
  // JSConformance report(via JsCompilerRunner), or a tsetse conformance
  // report (via TSC). For JsCompilerRunner, the filename field gets set to
  // the output .js filepath or the chunk name if this is a chunk (also called
  // a "module") that is passed to the JSCompilerRunner. It may be set to
  // /dev/stdout to indicate output was written to stdout. For tsetse
  // reporting, the filename field gets set to the violations report path
  // itself (see logTsetseFindings() in
  // google3/third_party/bazel_rules/rules_typescript/internal/tsc_wrapped/tsc_wrapped.ts).
  // TODO(b/393659358): consider using proto oneof for this field
  string filename = 1;

  // If true, indicates that not all requested JSConformance checks were run
  // and reported.
  bool unanalyzed = 2 [features.field_presence = EXPLICIT];

  message ConformanceViolation {
    // Requirement that was violated. It holds a reference to the conformance
    // config file that defined the requirement. It also holds a reference to
    // the allowlist_entry containing all files that are allowed to violate
    // the requirement.
    Requirement requirement = 1;
    Requirement.WhitelistEntry allowlist_entry = 2;
    // The path to the file that contained the violation.
    string path = 3;
    int32 line_no = 4;
    int32 col_no = 5;
    string rule_id = 6;
    // if this violation is a RECORD_ONLY violation during CheckJS, what should
    // the library deps conformance checker do with it. This field's value only
    // matters for RECORD_ONLY violations (e.g. Boq Web violations) and not for
    // the global violations (e.g. go/jscp violations) or
    // "extra_conformance_configs" of `js_library`.
    LibraryDepsConformanceCheckerAllowlistReason
        library_deps_conformance_checker_allowlist_reason = 7;

    // Specifies whether a violation is allowlisted for the library deps
    // conformance checker and why
    enum LibraryDepsConformanceCheckerAllowlistReason {
      NOT_ALLOWLISTED = 0;
      ALLOWLISTED_BOQ_WEB = 1;
    }
  }

  // If the report comes from a raw_js_library, the name of the
  // wrapping_raw.js file.
  string wrapping_raw_js_file_name = 3;

  // The list of conformance violations found in the library.
  repeated ConformanceViolation violations = 4;
}
